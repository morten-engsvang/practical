This is part A:
Test 1 is: U(x) = 4*sqrt(1-x^2) from 0 to 1, to see if it works at all.
The result of test 1 is: 3.1416
The estimated error of test 1 is: 0.00282808
The expected result is: 3.14159 and the actual error is then: 1.01973e-05
Test 2 is the same U(x) but now f(x,y,z) = U(x)*U(y)*U(z)
The result of test 2 is: 30.9957
The estimated error of test 2 is: 0.0502571
The expected result is: 31.0063 and the actual error is then: 0.0106095
Test 3 is the integral given in the homework.
The result of test 3 is: 1.39193
The estimated error of test 3 is: 0.00406911
I used 10000000 points.
-----------------------
This is part B
I estimate error using two different sequences: err = fabs(result1-result2)/(N*volume)
where result1 and result2 is from sampling N/2 points each for a total of N points.
I can now test the scaling of the error, I have plotted the error in plot.svg and plot_actual.svg
Where I have plotted the error estimates and the actual errors respectively
I test it for the integral given in the homework
Which means that the actual error is relative to: 1.3932It can seen that the plain Monte-Carlo integration error falls relatively quickly
after which it begins oscillating around 0
The error using the error using the quasi-random Halton sequence starts much lower and
appears to be more stable. However it has weird dips in the actual error.
